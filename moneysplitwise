#include<iostream>
#include<set>
#include<map>


using namespace std;


class personCompare{
public:

bool operator()(pair<string,int> p1,pair<string,int> p2){
  return p1.second<p2.second;
}
};



int main() {
  
  int noOfTransactions,friends;
  cin >> noOfTransactions >> friends;

  string x,y;
  int amount;

   map<string,int> net;

  while(noOfTransactions--){
    cin >> x >> y >> amount;
    
    if(net.count(x)==0){
        net[x]=0;
    }

    if(net.count(y)==0){
        net[y]=0;
    }

    net[x]-=amount;
    net[y]+=amount;
  }
    //now,iterate over the person and add those person in the multiset who have non-zero net balance

    multiset<pair<string,int> , personCompare > m;
    
    for(auto p:net){
      string person = p.first;
      int amount = p.second;

      if(net[person]!=0){
        m.insert(make_pair(person,amount));
      }
    }

    //make settlement(start and end)
    int count =0;
    while(!m.empty()){
      auto low = m.begin();
      auto high = prev(m.end());


      int debit = low->second;
      string debitPerson = low->first;

      int credit = high->second;
      string creditPerson = high->first;

      //pop them out
      m.erase(low);
      m.erase(high);


      int settledAmount = min(-debit,credit);
      debit+=settledAmount;
      credit-=settledAmount;


      //print the transaction between the person
      cout<<debitPerson<< " "<< "will pay" 
        <<" " <<settledAmount << " "<< "to"  << " "<<
       creditPerson << endl;

      if(debit!=0){
        m.insert(make_pair(debitPerson,debit));
      }
      if(credit!=0){
        m.insert(make_pair(creditPerson,credit));
      }
      count+=1;
    }
    cout<<count<<endl;
    return 0;
    }
